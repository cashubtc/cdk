use r2d2::{Pool, PooledConnection};
use r2d2_sqlite::rusqlite::params;
use r2d2_sqlite::SqliteConnectionManager;

/// Create a configured rusqlite connection to a SQLite database.
/// For SQLCipher support, enable the "sqlcipher" feature and pass a password.
pub fn create_sqlite_pool(
    path: &str,
    #[cfg(feature = "sqlcipher")] password: String,
) -> Result<Pool<SqliteConnectionManager>, r2d2::Error> {
    let (manager, is_memory) = if path.contains(":memory:") {
        (SqliteConnectionManager::memory(), true)
    } else {
        (SqliteConnectionManager::file(path), false)
    };

    let manager = manager.with_init(move |conn| {
        #[cfg(feature = "sqlcipher")]
        conn.execute_batch(&format!("pragma key = {};", password))?;

        conn.execute_batch(
            r#"
            pragma journal_mode = WAL;
            pragma synchronous = normal;
            pragma temp_store = memory;
            pragma mmap_size = 30000000000;
            pragma cache = shared;
            "#,
        )?;

        Ok(())
    });

    r2d2::Pool::builder()
        .max_size(if is_memory { 1 } else { 20 })
        .build(manager)
}

/// Migrates the migration generated by `build.rs`
pub fn migrate(
    mut conn: PooledConnection<SqliteConnectionManager>,
    migrations: &[(&str, &str)],
) -> Result<(), r2d2_sqlite::rusqlite::Error> {
    let tx = conn.transaction()?;
    tx.execute(
        r#"
           CREATE TABLE IF NOT EXISTS migrations (
               name TEXT PRIMARY KEY,
               applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
           )
           "#,
        [],
    )?;

    // Apply each migration if it hasnâ€™t been applied yet
    for (name, sql) in migrations {
        let already_applied: bool = tx.query_row(
            "SELECT EXISTS(SELECT 1 FROM migrations WHERE name = ?1)",
            params![name],
            |row| row.get(0),
        )?;

        if !already_applied {
            tx.execute_batch(sql)?;
            tx.execute("INSERT INTO migrations (name) VALUES (?1)", params![name])?;
        }
    }

    tx.commit()?;

    Ok(())
}
