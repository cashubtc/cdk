name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  pre-commit-checks:
    name: "Cargo fmt, typos"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "nightly-${{ steps.flake-hash.outputs.hash }}"
      - name: Cargo fmt
        run: |
          nix develop -i -L .#nightly --command bash -c '
            # Force use of Nix-provided rustfmt
            export RUSTFMT=$(command -v rustfmt)
            cargo fmt --check
          '
      - name: typos
        run: nix develop -i -L .#nightly --command typos

  examples:
    name: "Run examples"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        build-args:
          [
            mint-token,
            melt-token,
            p2pk,
            proof-selection,
            wallet
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Run example
        run: nix develop -i -L .#stable --command cargo r --example ${{ matrix.build-args }}

  clippy:
    name: "Workspace clippy"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Clippy
        run: nix develop -i -L .#stable --command cargo clippy --workspace --all-targets --all-features -- -D warnings

  test:
    name: "Workspace tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Test
        run: nix develop -i -L .#stable --command cargo test --workspace

  regtest-itest:
    name: "Integration regtest tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: false
      matrix:
        database:
          [
            SQLITE,
            POSTGRES
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Test
        run: nix develop -i -L .#stable --command just itest ${{ matrix.database }}

  fake-mint-itest:
    name: "Integration fake mint tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        database:
          [
          SQLITE,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Clippy
        run: nix develop -i -L .#stable --command cargo clippy -- -D warnings
      - name: Test fake mint
        run: nix develop -i -L .#stable --command just fake-mint-itest ${{ matrix.database }}

  pure-itest:
    name: "Integration fake wallet tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        database:
          [
          memory,
          sqlite,
          redb
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Test fake mint
        run: nix develop -i -L .#stable --command just test-pure ${{ matrix.database }}
      - name: Install Postgres
        run: bash -x crates/cdk-postgres/start_db_for_test.sh
      - name: Test mint
        run: nix develop -i -L .#stable --command just test


  payment-processor-itests:
    name: "Payment processor tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        ln:
          [
          FAKEWALLET,
          CLN,
          LND
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Test
        run: nix develop -i -L .#stable --command just itest-payment-processor ${{matrix.ln}}

  msrv-build:
    name: "MSRV workspace build"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "msrv-${{ steps.flake-hash.outputs.hash }}"
      - name: Build
        run: nix develop -i -L .#msrv --command cargo build ${{ matrix.build-args }}
      - name: Build workspace
        run: nix develop -i -L .#msrv --command cargo build --workspace


  check-wasm:
    name: Check WASM
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        rust:
          - stable
        target:
          - wasm32-unknown-unknown
        build-args:
          [
            -p cdk,
            -p cdk --no-default-features,
            -p cdk --no-default-features --features wallet,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Build cdk and binding
        run: nix develop -i -L ".#${{ matrix.rust }}" --command cargo build ${{ matrix.build-args }} --target ${{ matrix.target }}


  check-wasm-msrv:
    name: Check WASM
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        rust:
          - msrv
        target:
          - wasm32-unknown-unknown
        build-args:
          [
            -p cdk,
            -p cdk --no-default-features,
            -p cdk --no-default-features --features wallet,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "msrv-${{ steps.flake-hash.outputs.hash }}"
      - name: Build cdk wasm
        run: nix develop -i -L ".#${{ matrix.rust }}" --command cargo build ${{ matrix.build-args }} --target ${{ matrix.target }}

  fake-mint-auth-itest:
    name: "Integration fake mint auth tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      fail-fast: true
      matrix:
        database:
          [
          SQLITE,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Start Keycloak with Backup
        run: |
          docker compose -f misc/keycloak/docker-compose-recover.yml up -d
          until docker logs $(docker ps -q --filter "ancestor=quay.io/keycloak/keycloak:25.0.6") | grep "Keycloak 25.0.6 on JVM (powered by Quarkus 3.8.5) started"; do sleep 1; done

      - name: Verify Keycloak Import
        run: |
          docker logs $(docker ps -q --filter "ancestor=quay.io/keycloak/keycloak:25.0.6") | grep "Imported"
      - name: Test fake auth mint
        run: nix develop -i -L .#stable --command just fake-auth-mint-itest ${{ matrix.database }} http://127.0.0.1:8080/realms/cdk-test-realm/.well-known/openid-configuration
      - name: Stop and clean up Docker Compose
        run: |
          docker compose -f misc/keycloak/docker-compose-recover.yml down

  doc-tests:
    name: "Documentation Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-commit-checks
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Run doc tests
        run: nix develop -i -L .#stable --command cargo test --doc

  strict-docs:
    name: "Strict Documentation Check"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: doc-tests
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Get flake hash
        id: flake-hash
        run: echo "hash=$(sha256sum flake.lock | cut -d' ' -f1 | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          diagnostic-endpoint: ""
          use-flakehub: false
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable-${{ steps.flake-hash.outputs.hash }}"
      - name: Check docs with strict warnings
        run: nix develop -i -L .#stable --command just docs-strict
