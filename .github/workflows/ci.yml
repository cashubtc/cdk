name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  self-care:
    name: Flake self-check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v7
        with:
          fail-mode: true

  pre-commit-checks:
    name: "Cargo fmt, typos"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Cargo fmt
        run: |
          nix develop -i -L .#nightly --command bash -c '
            # Force use of Nix-provided rustfmt
            export RUSTFMT=$(command -v rustfmt)
            cargo fmt --check
          '
      - name: typos
        run: nix develop -i -L .#nightly --command typos
  
  examples:
    name: "Run examples"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        build-args:
          [
            mint-token,
            p2pk,
            proof-selection,
            wallet
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Run example
        run: nix develop -i -L .#stable --command cargo r --example ${{ matrix.build-args }}

  clippy:
    name: "Stable build, clippy and test"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        build-args:
          [
            -p cashu,
            -p cashu --no-default-features,
            -p cashu --no-default-features --features wallet,
            -p cashu --no-default-features --features mint,
            -p cashu --no-default-features --features "mint swagger",
            -p cdk-common,
            -p cdk-common --no-default-features,
            -p cdk-common --no-default-features --features wallet,
            -p cdk-common --no-default-features --features mint,
            -p cdk-common --no-default-features --features "mint swagger",
            -p cdk,
            -p cdk --no-default-features,
            -p cdk --no-default-features --features wallet,
            -p cdk --no-default-features --features mint,
            -p cdk --no-default-features --features "mint swagger",
            -p cdk-redb,
            -p cdk-sqlite,
            -p cdk-sqlite --features sqlcipher,
            -p cdk-axum --no-default-features,
            -p cdk-axum --no-default-features --features swagger,
            -p cdk-axum --no-default-features --features redis,
            -p cdk-axum --no-default-features --features "redis swagger",
            -p cdk-axum,
            -p cdk-cln,
            -p cdk-lnd,
            -p cdk-lnbits,
            -p cdk-fake-wallet,
            -p cdk-payment-processor,
            --bin cdk-cli,
            --bin cdk-cli --features sqlcipher,
            --bin cdk-mintd,
            --bin cdk-mintd --features redis,
            --bin cdk-mintd --features redb,
            --bin cdk-mintd --features "redis swagger redb",
            --bin cdk-mintd --features sqlcipher,
            --bin cdk-mintd --no-default-features --features lnd,
            --bin cdk-mintd --no-default-features --features cln,
            --bin cdk-mintd --no-default-features --features lnbits,
            --bin cdk-mintd --no-default-features --features fakewallet,
            --bin cdk-mintd --no-default-features --features grpc-processor,
            --bin cdk-mintd --no-default-features --features "management-rpc lnd",
            --bin cdk-mintd --no-default-features --features "management-rpc cln",
            --bin cdk-mintd --no-default-features --features "management-rpc lnbits",
            --bin cdk-mintd --no-default-features --features "management-rpc grpc-processor",
            --bin cdk-mintd --no-default-features --features "swagger lnd",
            --bin cdk-mintd --no-default-features --features "swagger cln",
            --bin cdk-mintd --no-default-features --features "swagger lnbits",
            --bin cdk-mint-cli,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Clippy
        run: nix develop -i -L .#stable --command cargo clippy ${{ matrix.build-args }} -- -D warnings
      - name: Test
        run: nix develop -i -L .#stable --command cargo test ${{ matrix.build-args }}

  itest:
    name: "Integration regtest tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        build-args:
          [
            -p cdk-integration-tests,
          ]
        database: 
          [
            REDB,
            SQLITE,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Clippy
        run: nix develop -i -L .#stable --command cargo clippy ${{ matrix.build-args }} -- -D warnings
      - name: Test
        run: nix develop -i -L .#stable --command just itest ${{ matrix.database }}
          
  fake-wallet-itest:
    name: "Integration fake wallet tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        build-args:
          [
            -p cdk-integration-tests,
          ]
        database: 
          [
          REDB,
          SQLITE,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Clippy
        run: nix develop -i -L .#stable --command cargo clippy ${{ matrix.build-args }} -- -D warnings
      - name: Test fake mint
        run: nix develop -i -L .#stable --command just fake-mint-itest ${{ matrix.database }}
                
  pure-itest:
    name: "Integration fake wallet tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Test fake mint
        run: nix develop -i -L .#stable --command just test


  payment-processor-itests:
    name: "Payment processor tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ln: 
          [
          FAKEWALLET,
          CLN,
          LND
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Test
        run: nix develop -i -L .#stable --command just itest-payment-processor ${{matrix.ln}}

  msrv-build:
    name: "MSRV build"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        build-args:
          [
            -p cashu --no-default-features --features "wallet mint",
            -p cdk-common --no-default-features --features "wallet mint",
            -p cdk --no-default-features --features "mint mint",
            -p cdk-axum,
            -p cdk-axum --no-default-features --features redis,
            -p cdk-lnbits,
            -p cdk-fake-wallet,
            -p cdk-cln,
            -p cdk-lnd,
            -p cdk-mint-rpc,
            -p cdk-sqlite,
            -p cdk-mintd,
            -p cdk-payment-processor --no-default-features,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: nix develop -i -L .#msrv --command cargo build ${{ matrix.build-args }}

  
  check-wasm:
    name: Check WASM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        rust:
          - stable
        target:
          - wasm32-unknown-unknown
        build-args:
          [
            -p cdk,
            -p cdk --no-default-features,
            -p cdk --no-default-features --features wallet,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Build cdk and binding
        run: nix develop -i -L ".#${{ matrix.rust }}" --command cargo build ${{ matrix.build-args }} --target ${{ matrix.target }}

        
  check-wasm-msrv:
    name: Check WASM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        rust:
          - msrv
        target:
          - wasm32-unknown-unknown
        build-args:
          [
            -p cdk,
            -p cdk --no-default-features,
            -p cdk --no-default-features --features wallet,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v11
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v6
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Build cdk wasm
        run: nix develop -i -L ".#${{ matrix.rust }}" --command cargo build ${{ matrix.build-args }} --target ${{ matrix.target }}
