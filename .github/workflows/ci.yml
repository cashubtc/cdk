name: CI

# CI Behavior:
# - On PR creation: Runs basic checks (fmt, typos) + small test subset (5 tests)
# - On approved PR: Runs full test suite (all tests including WASM, MSRV, integration)
# - On main branch push: Runs full test suite
# - On release: Runs full test suite
# - On manual trigger: Runs full test suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  pull_request_review:
    types: [ submitted ]
  release:
    types: [ created ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  pre-commit-checks:
    name: "Cargo fmt, typos"
    runs-on: self-hosted
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'
    timeout-minutes: 30
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "nightly"
      - name: Cargo fmt
        run: |
          nix develop -i -L .#nightly --command bash -c '
            # Force use of Nix-provided rustfmt
            export RUSTFMT=$(command -v rustfmt)
            cargo fmt --check
          '
      - name: typos
        run: nix develop -i -L .#nightly --command typos
  
  examples:
    name: "Run examples"
    runs-on: self-hosted
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'
    timeout-minutes: 30
    needs: pre-commit-checks
    strategy:
      matrix:
        build-args:
          [
            mint-token,
            melt-token,
            p2pk,
            proof-selection,
            wallet
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Run example
        run: nix develop -i -L .#stable --command cargo r --example ${{ matrix.build-args }}
      - name: Cleanup
        run: rm -rf ~/runner/_work/cdk/cdk/target/debug
  clippy:
    name: "Stable build, clippy and test"
    runs-on: self-hosted
    timeout-minutes: 30
    needs: pre-commit-checks
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Run small test matrix (PR)
        if: github.event_name == 'pull_request'
        run: nix develop -i -L .#stable --command bash -c 'PARALLEL=true MAX_PARALLEL_JOBS=8 TEST_SUBSET=small ./misc/test_matrix.sh'
      - name: Run full test matrix (main branch, approved PR, or manual)
        if: >
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch' ||
          (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
        run: nix develop -i -L .#stable --command bash -c 'PARALLEL=true MAX_PARALLEL_JOBS=8 TEST_SUBSET=full ./misc/test_matrix.sh'
      - name: Cleanup
        run: rm -rf ~/runner/_work/cdk/cdk/target/debug
  wasm-tests:
    name: "WASM tests"
    runs-on: self-hosted
    timeout-minutes: 30
    needs: [ pre-commit-checks,clippy ]
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Run WASM tests
        run: nix develop -i -L .#stable --command bash -c 'PARALLEL=true MAX_PARALLEL_JOBS=8 RUN_WASM_TESTS=true ./misc/test_matrix.sh'
      - name: Cleanup
        run: rm -rf ~/runner/_work/cdk/cdk/target/debug
  msrv-tests:
    name: "MSRV tests"
    runs-on: self-hosted
    timeout-minutes: 30
    needs: [ pre-commit-checks,clippy ]
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Run MSRV tests
        run: nix develop -i -L .#msrv --command bash -c 'PARALLEL=true MAX_PARALLEL_JOBS=8 RUN_MSRV_TESTS=true ./misc/test_matrix.sh'
      - name: Cleanup
        run: rm -rf ~/runner/_work/cdk/cdk/target/debug
  integration-tests:
    name: "Integration tests"
    runs-on: self-hosted
    timeout-minutes: 30
    needs: pre-commit-checks
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Start Postgres
        run: bash -x crates/cdk-postgres/start_db_for_test.sh
      - name: Run integration tests
        run: nix develop -i -L .#stable --command bash -c 'RUN_INTEGRATION_TESTS=true ./misc/test_matrix.sh'
      - name: Stop Postgres
        run: docker stop rust-test-pg
      - name: Cleanup
        run: rm -rf ~/runner/_work/cdk/cdk/target/debug
  fake-mint-auth-itest:
    name: "Integration fake mint auth tests"
    runs-on: self-hosted
    timeout-minutes: 30
    needs: [ pre-commit-checks, clippy ]
    if: >
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
    strategy:
      matrix:
        database:
          [
            SQLITE,
          ]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "stable"
      - name: Start Keycloak with Backup
        run: |
          docker compose -f misc/keycloak/docker-compose-recover.yml up -d
          until docker logs $(docker ps -q --filter "ancestor=quay.io/keycloak/keycloak:25.0.6") | grep "Keycloak 25.0.6 on JVM (powered by Quarkus 3.8.5) started"; do sleep 1; done

      - name: Verify Keycloak Import
        run: |
          docker logs $(docker ps -q --filter "ancestor=quay.io/keycloak/keycloak:25.0.6") | grep "Imported"
      - name: Test fake auth mint
        run: nix develop -i -L .#stable --command just fake-auth-mint-itest ${{ matrix.database }} http://127.0.0.1:8080/realms/cdk-test-realm/.well-known/openid-configuration
      - name: Stop and clean up Docker Compose
        run: |
          sudo rm -rf misc/keycloak/postgres_data
          docker compose -f misc/keycloak/docker-compose-recover.yml down
      - name: Cleanup
        run: rm -rf ~/runner/_work/cdk/cdk/target/debug